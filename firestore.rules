
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }

    // A student can read their assigned trainer's profile
    function isMyTrainer(trainerId) {
        return isRole('student') && getUserData(request.auth.uid).assignedTrainerId == trainerId;
    }

    // --- Collection Group Rules ---
    // Trainers can list their sales transactions across all students
    match /{path=**}/credit_transactions/{transactionId} {
      allow read: if isRole('trainer') && resource.data.trainerId == request.auth.uid;
      allow list: if isRole('trainer') && request.query.trainerId == request.auth.uid;
      allow write: if false; // Transactions are created via backend/transaction
    }

    // --- Top-Level Collection Rules ---
    match /users/{userId} {
      // Allow reading a user document if:
      // 1. You are the owner of the document.
      // 2. You are a trainer (can read any student profile).
      // 3. You are a student requesting your assigned trainer's profile.
      allow get: if isOwner(userId) || isRole('trainer') || isMyTrainer(userId);

      // Allow listing users ONLY if you are a trainer querying for your own students.
      // This is the critical rule for the "Students" page on the trainer dashboard.
      allow list: if isRole('trainer') && request.query.assignedTrainerId == request.auth.uid;
      
      // Allow updating a user document if you are the owner.
      allow update: if isOwner(userId);
      
      // Creating a user is handled by backend auth triggers, not direct client writes.
      allow create: if isSignedIn();
    }
    
    match /tests/{testId} {
      // Anyone can read test questions. This is required for public pages and for the build process.
      allow read: if true; 
      // Only trainers can create, update, or delete tests.
      allow write: if isRole('trainer');
    }

    match /plans/{planId} {
      // Anyone can read plans (students need to see them to purchase)
      allow read: if true;
      // Only the owning trainer can manage their plans.
      allow write: if isRole('trainer') && request.resource.data.trainerId == request.auth.uid;
    }

    match /submissions/{submissionId} {
      // Allow reading if you are the student who made it or the trainer it's assigned to.
      allow get: if isSignedIn() && (isOwner(resource.data.studentId) || isOwner(resource.data.trainerId));
      
      // Allow listing if you are the student querying your own, or a trainer querying your own.
      allow list: if (isRole('student') && request.query.studentId == request.auth.uid) || 
                     (isRole('trainer') && request.query.trainerId == request.auth.uid);
      
      // Students can create. Trainers can update (with feedback).
      allow create: if isRole('student');
      allow update: if isRole('trainer') || isRole('student');
    }
    
    // This is a sub-collection rule.
    match /submissions/{submissionId}/feedback_thread/{messageId} {
        allow read, write: if isSignedIn() && 
                             (isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || 
                              isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.trainerId));
    }
    
    // Users can read and write to their own credit transaction history.
    match /users/{userId}/credit_transactions/{transactionId} {
      allow read, list: if isOwner(userId);
      allow create: if false; // Created by backend logic only
    }
    
    // Notifications can only be read if you are the recipient.
    match /notifications/{notificationId} {
      allow read, list: if isSignedIn() && request.query.recipientId == request.auth.uid;
      allow write: if false; // Created by backend logic only
    }
  }
}
