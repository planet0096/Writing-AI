rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAssignedTrainer(studentDoc) {
        return studentDoc.data.assignedTrainerId == request.auth.uid;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // ANYONE can create a user during signup.
      allow create: if true;
      
      // A user can READ their OWN document. A TRAINER can READ their assigned STUDENT's document.
      allow read: if (isSignedIn() && isOwner(userId)) || (isRole('trainer') && isAssignedTrainer(get(/databases/$(database)/documents/users/$(userId))));
      
      // A user can UPDATE their OWN document. A TRAINER can update specific fields on an assigned student's document.
      allow update: if (isSignedIn() && isOwner(userId)) || (isRole('trainer') && isAssignedTrainer(get(/databases/$(database)/documents/users/$(userId))) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credits', 'currentPlan', 'accountStatus']));
      
      // TRAINERS can LIST users that are assigned to them.
      allow list: if isRole('trainer');

      // Rules for private subcollections within a user's document
      match /private_details/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      // Rules for credit transaction logs for a user
      match /credit_transactions/{transactionId} {
        allow read: if isSignedIn() && isOwner(userId);
        allow create, update, delete: if false; // Only backend can manage transactions
      }
    }
    
    // Collection Group rule for credit_transactions, used by Trainer Sales page
    match /{path=**}/credit_transactions/{transactionId} {
        allow read: if isRole('trainer') && resource.data.trainerId == request.auth.uid;
    }

    // Rules for the 'tests' collection
    match /tests/{testId} {
      allow create, update, delete: if isRole('trainer');
      allow read: if isSignedIn();
    }
    
    // Rules for the 'submissions' collection
    match /submissions/{submissionId} {
      allow create: if isRole('student');
      allow read, update: if isSignedIn() && (isOwner(resource.data.studentId) || (isRole('trainer') && resource.data.trainerId == request.auth.uid));
      allow list: if isRole('trainer'); // Allow trainers to query their submissions list
        
      // Rules for the feedback thread within a submission
      match /feedback_thread/{messageId} {
        allow read, create: if isSignedIn() && (isOwner(resource.data.authorId) || (isRole('trainer') && resource.data.authorId == request.auth.uid));
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // Rules for the 'plans' collection
    match /plans/{planId} {
      allow create, update, delete: if isRole('trainer') && request.resource.data.trainerId == request.auth.uid;
      allow read: if isSignedIn();
      allow list: if isRole('trainer');
    }
    
    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow create: if false; // Only backend can create
      allow read, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow list: if isRole('trainer');
    }
    
    // Lock down the email queue, only backend access
    match /email_queue/{emailId} {
      allow read, write, create, delete, list: if false;
    }
  }
}
