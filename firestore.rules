
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTrainer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can create a user document (for signup)
      allow create: if true;
      
      // Users can only read/update their own document.
      // A student can also read their assigned trainer's document.
      allow read, update: if isSignedIn() && (isOwner(userId) || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId == userId));
      
      // Trainers can list their own students.
      allow list: if isSignedIn() && isTrainer();
      
      // Subcollection for private details (API keys, email settings)
      match /private_details/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      // Subcollection for credit transactions
      match /credit_transactions/{transactionId} {
        // Users can read their own transactions. Trainers can list transactions for their students.
        allow read: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
      }
    }
    
    // Rules for the 'tests' collection
    match /tests/{testId} {
       // Tests are public content for SEO and SSG, so anyone can read them.
      allow read: if true;
      // Only trainers can create, update, or delete tests.
      allow write: if isSignedIn() && isTrainer();
    }
    
    // Rules for the 'submissions' collection
    match /submissions/{submissionId} {
      // Any signed-in user can create a submission (students).
      allow create: if isSignedIn();
      
      // Users can read/update their own submission. Trainers can read/update their students' submissions.
      allow read, update: if isSignedIn() && (isOwner(getAfter(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || isTrainer());
      
      // Students can list their own submissions. Trainers can list their students' submissions.
      allow list: if isSignedIn();

      // Rules for the feedback_thread subcollection within a submission
      match /feedback_thread/{messageId} {
        // Only the student who owns the submission or their assigned trainer can read/write messages.
        allow read, write: if isSignedIn() && (isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || isTrainer());
      }
    }
    
    // Rules for credit plans
    match /plans/{planId} {
      // Anyone signed in can read plans (so students can see them).
      allow read: if isSignedIn();
      // Only trainers can create, update, or delete plans.
      allow write: if isSignedIn() && isTrainer();
    }
    
     // Rules for notifications
    match /notifications/{notificationId} {
        // Users can only read notifications intended for them.
        allow read: if isSignedIn() && isOwner(resource.data.recipientId);
        // Any signed-in user can create a notification (students notifying trainers).
        allow create: if isSignedIn();
        // Users can only list their own notifications.
        allow list: if isSignedIn() && request.query.where.field == "recipientId" && request.query.where.value == request.auth.uid;
        // The recipient can delete their own notification.
        allow delete: if isSignedIn() && isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientId);
    }
    
    // Rules for email_queue collection
    match /email_queue/{emailId} {
        // Allow server-side processes (Genkit flows) to write to this collection.
        // For client-side, we would typically restrict this, but flows need it.
        allow create: if true; // In production, this should be locked down.
        // No one should read or delete from the queue directly.
        allow read, delete: if false;
    }
    
    // Rules for collection group 'credit_transactions'
    match /{path=**}/credit_transactions/{transactionId} {
      // Trainers can list all transactions that are tagged with their trainerId.
      allow read: if isSignedIn() && isTrainer();
    }
  }
}
