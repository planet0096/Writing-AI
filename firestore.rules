
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to improve readability
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTrainer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create a user document (for signup)
      allow create: if isSignedIn();
      
      // Users can read/update their own profile. Trainers can read their assigned students' profiles.
      allow read, update: if isOwner(userId) || (isTrainer() && get(/databases/$(database)/documents/users/$(userId)).data.assignedTrainerId == request.auth.uid);
      
      // Users can only delete their own accounts
      allow delete: if isOwner(userId);

      // Rules for private subcollections within user documents
      match /private_details/{docId} {
        allow read, write: if isOwner(userId);
      }
      
      // Rules for credit transaction subcollection
      match /credit_transactions/{transactionId} {
        // Only the user themselves or their assigned trainer can read transactions.
        allow read: if isOwner(userId) || isTrainer() && resource.data.trainerId == request.auth.uid;
        // Writes are handled by backend functions/transactions which have admin access.
        allow create, update, delete: if false; 
      }
    }
    
    // Rules for collection group queries
    match /{path=**}/credit_transactions/{transactionId} {
      // Allow trainers to perform collection group queries on transactions they are associated with.
      // This is essential for the Sales dashboard.
      allow read: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }

    // Rules for the 'tests' collection
    match /tests/{testId} {
      // Only trainers can create/update/delete tests.
      allow create, update, delete: if isSignedIn() && isTrainer();
      
      // Any user (student or trainer) can read test details.
      // This is also required for public test pages.
      allow read: if true;
    }

    // Rules for the 'submissions' collection
    match /submissions/{submissionId} {
      // Students can create submissions.
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;

      // Read/Update access is granted to the student who owns it or the assigned trainer.
      allow read, update: if isSignedIn() && (isOwner(resource.data.studentId) || isOwner(resource.data.trainerId));
      
      // No one can delete submissions directly.
      allow delete: if false;

      // Rules for the feedback thread subcollection
      match /feedback_thread/{messageId} {
         // The student who owns the submission or the trainer can read/write to the thread.
         allow read, create, update: if isSignedIn() && (isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.trainerId));
      }
    }

    // Rules for the 'plans' collection
    match /plans/{planId} {
      // Only trainers can create/update/delete credit plans.
      allow create, update, delete: if isSignedIn() && isTrainer() && request.resource.data.trainerId == request.auth.uid;
      
      // Any authenticated user can view plans.
      allow read: if isSignedIn();
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        // Backend can create. Users can read/delete their own.
        allow create: if false;
        allow read, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
    }
    
    // Rules for email queue
    match /email_queue/{emailId} {
      // Only backend processes can access this collection.
      allow read, write: if false;
    }
  }
}
