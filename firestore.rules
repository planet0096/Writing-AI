
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTrainer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Matches any document in the 'users' collection
    match /users/{userId} {
      // Allow create for any signed-in user (for signup)
      allow create: if isSignedIn();

      // Read:
      // 1. Allow a user to read their own document.
      // 2. Allow a student to read their assigned trainer's document.
      allow get: if isSignedIn() && (isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId == userId);
      
      // List: Allow a trainer to list the students assigned to them.
      allow list: if isSignedIn() && isTrainer() && request.query.where.assignedTrainerId == request.auth.uid;
      
      // Update:
      // 1. Allow any user to update their own document.
      // 2. Allow a trainer to update their student's documents (e.g. to block/unblock)
      allow update: if isSignedIn() && (isOwner(userId) || isTrainer());

      // Students cannot delete their account through the app
      allow delete: if false;

      // Sub-collection for private data
      match /private_details/{docId} {
        // Only the user themselves can access their private details
        allow read, write: if isOwner(userId);
      }
      
      // Sub-collection for credit transactions
      match /credit_transactions/{transactionId} {
        // Read: A user can read their own transaction history, OR a trainer can read transactions of their students.
        allow read, list: if isSignedIn() && (isOwner(userId) || isTrainer());
        
        // Create: Transactions can only be created by a trainer for their students or for themselves (future-proofing).
        allow create: if isSignedIn() && isTrainer();
        
        // Transactions are immutable
        allow update, delete: if false;
      }
    }
    
    // Matches any document in the 'tests' collection
    match /tests/{testId} {
        // Anyone can read tests to allow for public-facing test pages and for students to take tests.
        allow read, list: if true;
        
        // Only trainers can create, update, or delete tests.
        allow create, update, delete: if isSignedIn() && isTrainer();
    }
    
    // Matches any document in the 'plans' collection (credit plans)
    match /plans/{planId} {
        // Read: Anyone can read plans to see what's available.
        allow read, list: if true;
        
        // Write: Only trainers can create/edit/delete plans.
        allow create, update, delete: if isSignedIn() && isTrainer();
    }
    
    // Matches any document in the 'submissions' collection
    match /submissions/{submissionId} {
        allow read, write: if isSignedIn();
        
        match /feedback_thread/{messageId} {
             allow read, list, create: if isSignedIn();
        }
    }
    
    // Matches any document in the 'email_queue' collection
    match /email_queue/{emailId} {
      // Allow server-side processes (like Genkit flows/Firebase Functions) to write.
      // Client-side creation should be done via a callable function for security.
      // For this app's architecture, flows are server-side, so this is okay.
      allow create: if true; 
      allow read, update, delete: if false; // Only server can manage the queue
    }
    
    match /notifications/{notificationId} {
        allow create: if true; // Created by server-side logic
        allow list: if isSignedIn() && request.query.where.recipientId == request.auth.uid;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.recipientId;
        allow read, update: if false;
    }
  }
}
