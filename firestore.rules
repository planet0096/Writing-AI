rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isTrainer() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    function isStudent() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }
    
    function isAssignedTrainer(studentId) {
        let studentDoc = get(/databases/$(database)/documents/users/$(studentId));
        // Check if studentDoc and its data exists before accessing fields
        return studentDoc != null && 'data' in studentDoc && 'assignedTrainerId' in studentDoc.data && studentDoc.data.assignedTrainerId == request.auth.uid;
    }

    // Collection: users
    match /users/{userId} {
      allow create: if true;

      // A user can read/update their own profile, or a trainer can read/update their assigned student
      allow read, update: if isSignedIn() && (isOwner(userId) || isAssignedTrainer(userId));
      
      // Trainers can LIST users but ONLY if they are querying for their own students.
      allow list: if isTrainer() && request.query.get('where') != null && request.query.where.get('assignedTrainerId') == request.auth.uid;
      
      match /private_details/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      match /credit_transactions/{transactionId} {
        allow read: if isSignedIn() && (isOwner(userId) || isAssignedTrainer(userId));
        allow create: if isSignedIn();
      }
    }
    
    // Collection Group for sales dashboard
    match /{path=**}/credit_transactions/{transactionId} {
      allow read: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }

    // Collection: tests
    match /tests/{testId} {
      allow create, update, delete: if isTrainer() && request.resource.data.trainerId == request.auth.uid;
      allow read: if isSignedIn();
    }
    
    // Collection: submissions
    match /submissions/{submissionId} {
      allow create: if isStudent();
      allow read, update: if (isSignedIn() && (isOwner(resource.data.studentId) || isAssignedTrainer(resource.data.studentId)));
      
      // Trainers can LIST submissions but ONLY if they are querying for their own submissions.
      allow list: if isTrainer() && request.query.get('where') != null && request.query.where.get('trainerId') == request.auth.uid;
      
      match /feedback_thread/{messageId} {
        allow read, create: if (isSignedIn() && (isOwner(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || isAssignedTrainer(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId)));
        allow update, delete: if false;
      }
    }
    
    // Collection: plans
    match /plans/{planId} {
      allow create, update, delete: if isTrainer() && request.resource.data.trainerId == request.auth.uid;
      allow read: if isSignedIn();
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
      allow create: if true; 
      allow read, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow list: if isTrainer() && request.query.get('where') != null && request.query.where.get('recipientId') == request.auth.uid;
    }
    
    // Collection: email_queue
    match /email_queue/{emailId} {
      allow create: if isSignedIn();
      allow read, write, delete: if false;
    }
  }
}
