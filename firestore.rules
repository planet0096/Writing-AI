rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isTrainer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }

    function isTheirAssignedStudent(trainerId) {
      // Check if the currently authenticated user (a student) is assigned to the trainer being requested.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId == trainerId;
    }
    
    //Collections
    match /users/{userId} {
      // Allow creation for anyone (during signup).
      allow create: if true;
      
      // Allow a user to read/update their own document.
      // Also, allow a student to read their assigned trainer's document.
      allow read, update: if isSignedIn() && (isOwner(userId) || isTheirAssignedStudent(userId));

      // Trainers can list their own students.
      allow list: if isSignedIn() && isTrainer() && request.query.where.assignedTrainerId == request.auth.uid;

      match /credit_transactions/{transactionId} {
        allow read, list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && (isOwner(userId) || isTrainer());
      }
    }
    
    match /tests/{testId} {
      // Allow trainers to do anything with tests.
      allow read, write: if isSignedIn() && isTrainer();
      // Allow students to read tests.
      allow read: if isSignedIn() && isStudent();
    }
    
    match /plans/{planId} {
        // Trainers can manage their own plans
        allow read, write: if isSignedIn() && isTrainer() && resource.data.trainerId == request.auth.uid;
        // Students can read plans
        allow read: if isSignedIn() && isStudent();
    }
    
    match /submissions/{submissionId} {
        allow create: if isSignedIn() && isStudent();
        
        // A user can read/update if they are the student who owns it, or the trainer assigned to it.
        allow read, update: if isSignedIn() && 
                             (resource.data.studentId == request.auth.uid || resource.data.trainerId == request.auth.uid);
                             
        // A trainer can list submissions assigned to them.
        allow list: if isSignedIn() && isTrainer() && request.query.where.trainerId == request.auth.uid;
        
        match /feedback_thread/{messageId} {
           allow read, list, create: if isSignedIn() &&
                                     (exists(/databases/$(database)/documents/submissions/$(submissionId)) &&
                                     (get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId == request.auth.uid ||
                                      get(/databases/$(database)/documents/submissions/$(submissionId)).data.trainerId == request.auth.uid));
        }
    }
    
    match /email_queue/{emailId} {
        // Allow server-side processes (like our flows) to create emails.
        // For client-side, only allow if the user is triggering an action related to their trainer.
        allow create: if isSignedIn();
    }
    
     match /notifications/{notificationId} {
      // A user can only access notifications intended for them.
      allow read, list, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow create: if isSignedIn();
    }
  }
}
