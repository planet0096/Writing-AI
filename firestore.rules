
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default: Deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read/write their own data.
    // Trainers can read their assigned students' public data.
    // Students can read their assigned trainer's public data.
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                  || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer' && get(/databases/$(database)/documents/users/$(userId)).data.assignedTrainerId == request.auth.uid)
                  || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId == userId);

      allow write: if request.auth.uid == userId;

      // Credit transactions can only be created by a server-side process (our flows) or the assigned trainer.
      // Students can read their own transaction history.
      match /credit_transactions/{transactionId} {
        allow read: if request.auth.uid == userId;
        allow create: if get(/databases/$(database)/documents/users/$(userId)).data.assignedTrainerId == request.auth.uid;
        allow write: if false; // No updates/deletes
      }
      
       match /private_details/{detailId} {
        allow read, write: if request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)).data.role == 'trainer';
       }
    }

    // Plans: Trainers can manage their own plans. Students can read plans from their assigned trainer.
    match /plans/{planId} {
      allow read: if resource.data.trainerId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId
                  || resource.data.trainerId == request.auth.uid;
      allow create, update, delete: if request.resource.data.trainerId == request.auth.uid;
    }

    // Tests: Trainers can manage their own tests. Students can read tests from their assigned trainer.
    match /tests/{testId} {
      allow read: if resource.data.trainerId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedTrainerId 
                  || resource.data.trainerId == request.auth.uid;
      allow create, update, delete: if request.resource.data.trainerId == request.auth.uid;
    }
    
    // Submissions:
    // Students can create submissions.
    // Students and their assigned trainer can read the submission.
    // Only trainers or AI flow can update (evaluate) it.
    match /submissions/{submissionId} {
        allow create: if request.resource.data.studentId == request.auth.uid;
        allow read: if resource.data.studentId == request.auth.uid || resource.data.trainerId == request.auth.uid;
        allow update: if resource.data.trainerId == request.auth.uid;
        
        // Conversation thread within a submission
        match /feedback_thread/{messageId} {
            allow read: if get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId == request.auth.uid || get(/databases/$(database)/documents/submissions/$(submissionId)).data.trainerId == request.auth.uid;
            allow create: if request.resource.data.authorId == request.auth.uid;
        }
    }
    
    // Email Queue: Can only be written to by authenticated users (server-side logic will validate further)
    match /email_queue/{emailId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false;
    }
    
    // Notifications: Recipient can read/delete their own notifications. Can be created by anyone authenticated (flows).
    match /notifications/{notificationId} {
        allow create: if request.auth != null;
        allow read, delete: if resource.data.recipientId == request.auth.uid;
        allow update: if false;
    }
    
  }
}
