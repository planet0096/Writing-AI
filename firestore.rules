
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isTrainer() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    function isStudent() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }
    
    function isAssignedTrainer(studentId) {
        let studentDoc = get(/databases/$(database)/documents/users/$(studentId)).data;
        return studentDoc.assignedTrainerId == request.auth.uid;
    }

    // Collection: users
    match /users/{userId} {
      // Anyone can create a user account (signup)
      allow create: if true;
      
      // Users can only read/update their own profile
      allow read, update: if isSignedIn() && isOwner(userId);

      // Trainers can read their assigned students' data
      allow read: if isTrainer() && isAssignedTrainer(userId);
      
      // Trainers can query for their students
      allow list: if isTrainer() && request.query.get('where')[0][0] == 'assignedTrainerId' && request.query.get('where')[0][2] == request.auth.uid;

      // A trainer can update a student's credits if they are assigned
      allow update: if isTrainer() && isAssignedTrainer(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credits', 'currentPlan', 'accountStatus', 'assignedTrainerId']);

      // Private subcollections for settings
      match /private_details/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      // Credit transactions subcollection
      match /credit_transactions/{transactionId} {
          // A user can read their own transactions
          allow read: if isSignedIn() && isOwner(userId);
          // Only backend/server logic should create transactions (via a transaction)
          allow create, update, delete: if false; 
      }
    }
    
    // Collection Group: credit_transactions (for trainer sales dashboard)
    match /{path=**}/credit_transactions/{transactionId} {
        // Allow trainers to read transactions where they are listed as the trainerId
        allow read, list: if isTrainer() && get(resource.path).data.trainerId == request.auth.uid;
    }

    // Collection: tests
    match /tests/{testId} {
        // Only trainers can create/update/delete tests that they own
        allow create: if isTrainer();
        allow update, delete: if isTrainer() && resource.data.trainerId == request.auth.uid;
        
        // Any signed-in user can read tests
        allow read: if isSignedIn();
        // Allow trainers to list their own tests
        allow list: if isTrainer() && request.query.get('where')[0][2] == request.auth.uid;
    }
    
    // Collection: submissions
    match /submissions/{submissionId} {
        // Students can create a submission
        allow create: if isStudent();
        
        // Only the student who made it or their assigned trainer can read/update it
        allow read, update: if (isSignedIn() && (isOwner(resource.data.studentId) || isAssignedTrainer(resource.data.studentId)));
        
        // Trainers can list submissions that belong to them
        allow list: if isTrainer() && request.query.get('where')[0][2] == request.auth.uid;
        
        // Feedback subcollection
        match /feedback_thread/{messageId} {
             allow read, create: if (isSignedIn() && (isOwner(resource.data.studentId) || isAssignedTrainer(resource.data.studentId)));
             allow update, delete: if false; // Don't allow editing messages
        }
    }
    
    // Collection: plans
    match /plans/{planId} {
        // Trainers can manage their own plans
        allow create, update, delete: if isTrainer() && request.resource.data.trainerId == request.auth.uid;
        
        // All signed-in users can read plans
        allow read: if isSignedIn();
         // Trainers can list their own plans
        allow list: if isTrainer() && request.query.get('where')[0][2] == request.auth.uid;
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
        // Only backend can create
        allow create: if false; 
        // Only the recipient can read/delete
        allow read, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
        allow list: if isTrainer() && request.query.get('where')[0][2] == request.auth.uid;

    }
    
    // Collection: email_queue
    match /email_queue/{emailId} {
        // Only backend can create/read/delete
        allow create, read, delete: if false;
    }

  }
}
