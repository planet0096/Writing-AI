
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isTrainer() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }
    
    function isStudent() {
       return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isAssignedToTrainer(studentId, trainerId) {
      return get(/databases/$(database)/documents/users/$(studentId)).data.assignedTrainerId == trainerId;
    }


    // Collection: users
    match /users/{userId} {
      // Any authenticated user can create their own account record during signup.
      allow create: if isUserAuthenticated();
      
      // Users can only read their own document.
      // Trainers can read the documents of students assigned to them.
      allow read: if isUser(userId) || 
                   (isTrainer() && isAssignedToTrainer(userId, request.auth.uid));
      
      // Users can only update their own document.
      allow update: if isUser(userId);
      
      // Users cannot delete their own accounts.
      allow delete: if false;

      // Subcollection: private_details
      // Only the user themselves can access their own private details.
      match /private_details/{docId} {
        allow read, write: if isUser(userId);
      }
      
       // Subcollection: credit_transactions
      match /credit_transactions/{transactionId} {
        // A user can read their own transaction history.
        // A trainer can read the history of their assigned students.
        allow read: if isUser(userId) ||
                     (isTrainer() && isAssignedToTrainer(userId, request.auth.uid));
                     
        // Transactions are created by server-side logic (flows) or other secure processes,
        // so client-side creation is disallowed.
        allow create, update, delete: if false;
      }
    }
    
    // Collection: tests
    match /tests/{testId} {
      // Only trainers can create, update, or delete tests.
      allow write: if isTrainer();
      
      // Any authenticated user can read the tests.
      // This allows students to see tests from their assigned trainer.
      allow read: if isUserAuthenticated();
    }
    
    // Collection: submissions
    match /submissions/{submissionId} {
      // Students can create their own submissions.
      allow create: if isStudent();
      
      // A student can read their own submission.
      // A trainer can read submissions from their students.
      allow read: if (isStudent() && resource.data.studentId == request.auth.uid) ||
                   (isTrainer() && resource.data.trainerId == request.auth.uid);
                   
      // Students can update a submission (e.g., to request an evaluation type).
      // Trainers can update a submission (e.g., to add feedback).
      allow update: if (isStudent() && resource.data.studentId == request.auth.uid) ||
                     (isTrainer() && resource.data.trainerId == request.auth.uid);
                     
      // Deletion of submissions is disallowed from the client.
      allow delete: if false;
      
      // Subcollection: feedback_thread
      match /feedback_thread/{messageId} {
         // The student who owns the submission or their assigned trainer can read/write messages.
         allow read, write: if (isUser(resource.data.authorId) && (isUser(get(/databases/$(database)/documents/submissions/$(submissionId)).data.studentId) || isUser(get(/databases/$(database)/documents/submissions/$(submissionId)).data.trainerId)));
      }
    }
    
    // Collection: plans
    match /plans/{planId} {
        // Only trainers can create, update, and delete credit plans.
        allow write: if isTrainer();
        
        // All authenticated users can read plans to view purchase options.
        allow read: if isUserAuthenticated();
    }
    
    // Collection: notifications
    // These are handled by server-side logic, so clients can't write directly.
    match /notifications/{notificationId} {
        allow read: if isUser(resource.data.recipientId);
        allow write: if false;
    }
    
    // Collection: email_queue
    // All emails are queued by server-side flows. No client access.
    match /email_queue/{emailId} {
      allow read, write: if false;
    }
  }
}
